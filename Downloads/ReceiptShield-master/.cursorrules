# AI Agent Rules for ReceiptShield

This file provides context and rules for AI coding agents working on the ReceiptShield project.

## Project Overview

**ReceiptShield** is an AI-powered receipt management and fraud detection system built with:
- **Frontend**: Next.js 15 (App Router), React 18, TypeScript 5.8, Tailwind CSS
- **Backend**: Firebase (Auth, Firestore, Storage, Hosting)
- **AI/ML**: Google Gemini (Genkit), Python ML models for fraud detection
- **Architecture**: Multi-role (Admin/Manager/Employee), RBAC, serverless

## Core Principles

1. **Type Safety First**: Always use TypeScript, never use `any`
2. **Component Modularity**: Keep components small, focused, and reusable
3. **Security**: Never expose API keys, always validate inputs, follow RBAC
4. **Performance**: Use React best practices, lazy loading, code splitting
5. **Documentation**: Update docs when changing functionality

## Project Structure

```
src/
├── app/              # Next.js App Router pages and API routes
├── components/       # React components (organized by role/feature)
│   ├── ui/          # Base shadcn/ui components
│   ├── admin/       # Admin-specific components
│   ├── manager/     # Manager-specific components
│   └── employee/    # Employee-specific components
├── lib/             # Utilities, helpers, Firebase config
├── hooks/           # Custom React hooks
├── contexts/        # React contexts (auth, theme, etc.)
├── types/           # TypeScript type definitions
└── ai/              # Genkit AI flows and integration

ml/
├── models/          # Trained ML models (*.pkl)
├── scripts/         # Python training/prediction scripts
└── data/            # Training datasets

docs/                # Comprehensive documentation
scripts/             # Automation scripts (deployment, setup, testing)
tools/               # Development tools (PlantUML, etc.)
```

## Coding Standards

### TypeScript/React

```typescript
// ✅ Good - Proper typing, clear naming
interface ReceiptData {
  id: string;
  amount: number;
  date: Date;
  category: string;
}

const ProcessReceipt: React.FC<{ receipt: ReceiptData }> = ({ receipt }) => {
  const { user } = useAuth();
  // Component logic
};

// ❌ Bad - any types, unclear naming
const ProcessReceipt = ({ data }: any) => {
  // ...
};
```

### File Naming

- **Components**: PascalCase (e.g., `ReceiptCard.tsx`)
- **Utilities**: camelCase (e.g., `formatCurrency.ts`)
- **Hooks**: camelCase with `use` prefix (e.g., `useReceipts.ts`)
- **Types**: PascalCase (e.g., `Receipt.ts` or in `types/index.ts`)
- **API Routes**: lowercase with hyphens (e.g., `upload-receipt/route.ts`)

### Component Structure

```typescript
// 1. Imports (grouped: React, third-party, local)
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/contexts/auth-context';

// 2. Types/Interfaces
interface ComponentProps {
  // ...
}

// 3. Component
export function ComponentName({ prop }: ComponentProps) {
  // 3a. Hooks
  const router = useRouter();
  const [state, setState] = useState();
  
  // 3b. Effects
  useEffect(() => {
    // ...
  }, []);
  
  // 3c. Handlers
  const handleAction = () => {
    // ...
  };
  
  // 3d. Render
  return (
    // JSX
  );
}
```

### Styling

- Use **Tailwind CSS** utility classes
- Use **shadcn/ui** components as base
- Use **cn()** utility for conditional classes
- Follow existing color scheme and spacing

```typescript
import { cn } from '@/lib/utils';

<div className={cn(
  "base-classes",
  condition && "conditional-classes",
  className // Allow prop override
)} />
```

## Firebase Patterns

### Authentication

```typescript
// Use auth context, not direct Firebase calls
const { user, loading, signIn, signOut } = useAuth();

// Role-based checks
if (user?.role !== 'admin') {
  return <Unauthorized />;
}
```

### Firestore Queries

```typescript
// Use proper typing
const receiptsRef = collection(db, 'receipts');
const q = query(
  receiptsRef, 
  where('userId', '==', user.uid),
  orderBy('date', 'desc'),
  limit(20)
);
const snapshot = await getDocs(q);
```

### Error Handling

```typescript
try {
  await uploadReceipt(file);
} catch (error) {
  if (error instanceof FirebaseError) {
    console.error('Firebase error:', error.code, error.message);
  }
  // Show user-friendly message
  toast.error('Failed to upload receipt');
}
```

## AI/Genkit Patterns

### Flows

```typescript
// ai/flows/processReceipt.ts
import { defineFlow } from 'genkit';

export const processReceiptFlow = defineFlow(
  {
    name: 'processReceipt',
    inputSchema: z.object({ imageUrl: z.string() }),
    outputSchema: z.object({ /* ... */ }),
  },
  async (input) => {
    // AI processing logic
  }
);
```

## Common Tasks

### Adding a New Page

1. Create in `src/app/page-name/page.tsx`
2. Follow App Router conventions
3. Add metadata for SEO
4. Update navigation if needed
5. Add to documentation

### Adding a New Component

1. Determine category (ui/admin/manager/employee/shared)
2. Create in appropriate `components/` subdirectory
3. Use TypeScript, proper props interface
4. Export from index if needed
5. Document complex logic

### Adding an API Route

1. Create in `src/app/api/route-name/route.ts`
2. Use Next.js 15 Route Handlers
3. Validate input with Zod
4. Check authentication/authorization
5. Handle errors properly
6. Update API documentation

### Modifying ML Models

1. Work in `ml/scripts/`
2. Update training data in `ml/data/`
3. Save models to `ml/models/`
4. Document changes in `ml/README.md`
5. Update version in metadata

## Security Rules

### Never Do:
- ❌ Commit API keys or secrets
- ❌ Expose Firebase config in client code (use env vars)
- ❌ Skip input validation
- ❌ Ignore role-based access control
- ❌ Use `dangerouslySetInnerHTML` without sanitization

### Always Do:
- ✅ Validate all user inputs (Zod schemas)
- ✅ Check user roles before sensitive operations
- ✅ Use Firebase Security Rules
- ✅ Sanitize data before display
- ✅ Use HTTPS for all API calls

## Testing Guidelines

```typescript
// Write tests for:
- Utility functions (100% coverage goal)
- Complex business logic
- Critical user flows
- API endpoints

// Test file naming: ComponentName.test.tsx
```

## Git Workflow

### Commit Messages

Follow Conventional Commits:
```
feat: add receipt bulk upload
fix: correct fraud score calculation
docs: update API documentation
style: format code with prettier
refactor: simplify receipt processing
test: add unit tests for auth
chore: update dependencies
```

### Branch Naming

```
feature/receipt-bulk-upload
fix/fraud-detection-accuracy
docs/api-endpoints
refactor/auth-context
```

## Common Patterns

### Loading States

```typescript
const [loading, setLoading] = useState(false);

if (loading) return <LoadingSpinner />;
```

### Error States

```typescript
const [error, setError] = useState<string | null>(null);

if (error) return <ErrorMessage message={error} />;
```

### Data Fetching

```typescript
// Use TanStack Query for server state
const { data, isLoading, error } = useQuery({
  queryKey: ['receipts', userId],
  queryFn: () => fetchReceipts(userId)
});
```

## Performance Optimization

- Use `React.memo` for expensive components
- Use `useMemo` and `useCallback` appropriately
- Lazy load heavy components
- Optimize images (Next.js Image component)
- Implement virtualization for long lists

## Accessibility

- Use semantic HTML
- Add proper ARIA labels
- Ensure keyboard navigation works
- Test with screen readers
- Follow WCAG 2.1 AA standards

## When Helping

### Do:
- ✅ Follow existing patterns and conventions
- ✅ Update documentation when changing code
- ✅ Maintain type safety
- ✅ Consider performance implications
- ✅ Think about security
- ✅ Write clean, readable code
- ✅ Add comments for complex logic
- ✅ Suggest improvements when appropriate

### Don't:
- ❌ Break existing functionality
- ❌ Introduce security vulnerabilities
- ❌ Ignore TypeScript errors
- ❌ Use deprecated APIs
- ❌ Skip error handling
- ❌ Create tightly coupled code
- ❌ Leave console.logs in production code

## Quick References

### Key Files
- `src/lib/firebase.ts` - Firebase configuration
- `src/contexts/auth-context.tsx` - Authentication logic
- `src/types/index.ts` - Global type definitions
- `src/components/ui/` - Base UI components
- `env.example` - Required environment variables

### Key Dependencies
- `next` - Framework
- `react` - UI library
- `firebase` - Backend
- `genkit` - AI framework
- `zod` - Validation
- `tailwindcss` - Styling
- `shadcn/ui` - Component library

### Documentation
- Main: `README.md`
- API: `docs/api/README.md`
- Architecture: `docs/architecture/C4_ARCHITECTURE.md`
- Contributing: `CONTRIBUTING.md`

## Environment Variables

Required in `.env.local`:
```env
# Firebase
NEXT_PUBLIC_FIREBASE_API_KEY=
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=
NEXT_PUBLIC_FIREBASE_PROJECT_ID=
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=
NEXT_PUBLIC_FIREBASE_APP_ID=

# AI
GOOGLE_GENAI_API_KEY=

# Email
SENDGRID_API_KEY=
EMAIL_FROM=
```

## Role-Specific Logic

### Admin
- Full access to all features
- User management
- System configuration
- Analytics for all users

### Manager
- Team management
- Receipt approval
- Department analytics
- Budget oversight

### Employee
- Submit receipts
- View own receipts
- Personal dashboard
- Limited analytics

## Database Schema (Firestore)

```typescript
// collections
users: {
  uid: string;
  email: string;
  role: 'admin' | 'manager' | 'employee';
  name: string;
  department?: string;
  managerId?: string;
}

receipts: {
  id: string;
  userId: string;
  amount: number;
  date: Timestamp;
  category: string;
  vendor: string;
  status: 'pending' | 'approved' | 'rejected';
  fraudScore: number;
  imageUrl: string;
  ocrData: object;
  createdAt: Timestamp;
  updatedAt: Timestamp;
}
```

## Remember

This is an enterprise-grade application handling sensitive financial data. Always prioritize:
1. **Security** - Protect user data
2. **Reliability** - Code must work correctly
3. **Performance** - Fast, responsive UI
4. **Maintainability** - Clean, documented code
5. **User Experience** - Intuitive, accessible interface

When in doubt, ask for clarification or refer to existing code patterns in the project.

